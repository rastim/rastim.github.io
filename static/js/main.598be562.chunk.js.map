{"version":3,"sources":["tim.png","components/Navbar.js","components/Home.js","components/About.js","hoc/Rainbow.js","components/Contact.js","components/Post.js","action/postAction.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","react_default","a","createElement","className","react_router_dom","to","Home","console","log","this","props","posts","postList","length","map","post","key","id","title","body","Component","connect","state","Rainbow","WrappedComponent","Math","floor","random","Contact","Post","handleClick","_this","deletePost","history","push","onClick","ownProps","match","params","post_id","find","dispatch","type","App","components_Navbar","react_router","exact","path","component","About","Boolean","window","location","hostname","initState","rootReduces","arguments","undefined","action","newPosts","filter","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.598be562.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tim.9264d5ec.png\";","import React from 'react';\nimport { Link, NavLink, withRouter } from 'react-router-dom';\n\nconst Navbar = () => {\n    return (\n        <nav className=\"nav-wrapper red darken-3\">\n            <div className=\"container\">\n                <a className=\"brand-logo\">Hijrahtime.com</a>\n                <ul className=\"right\">\n                    <li><NavLink to=\"/\">Home</NavLink></li>\n                    <li><NavLink to=\"/about\">About</NavLink></li>\n                    <li><NavLink to=\"/contact\">Contact</NavLink></li>\n\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default withRouter(Navbar);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Tim from '../tim.png'\nimport { connect } from 'react-redux';\n\nclass Home extends Component {\n    render() {\n        console.log(this.props)\n        const { posts } = this.props;\n        const postList = posts.length ? (\n            posts.map(post => {\n                return (\n                    <div className=\"post card\" key={post.id}>\n                        <div className=\"card-content\">\n                            <Link to={'/posts/' + post.id}>\n                            <span className=\"card-title\">{post.title}</span>\n                            </Link>\n                            <p>{post.body}</p>\n                        </div>\n                    </div>\n                )\n            })\n        ) : (\n            <div className=\"center\">No Post Yet</div>\n        )\n        return(\n            <div className=\"container home\">\n           <h4>Home</h4>\n            {postList}\n        </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.posts\n    }\n}\n\nexport default connect(mapStateToProps)(Home)","import React from 'react';\nimport Rainbow from '../hoc/Rainbow';\n\nconst About = () => {\n    return (\n        <div className=\"container\">\n            <h4>About</h4>\n            <p>Home Page ~ Materialize comes in two different forms. You can select which version you want depending on your preference and expertise. To start using Materialize, all you have to do is download one of the options below.</p>\n        </div>\n    )\n}\n\nexport default Rainbow(About)","import React from 'react'\n\nconst Rainbow = (WrappedComponent) => {\n\n    const colours = ['red','pink','orange','blue','green','yellow'];\n    const randomColour = colours[Math.floor(Math.random() * 5)]\n    const className = randomColour + '-text';\n\n    return (props) => {\n        return (\n            <div className={className}>\n                <WrappedComponent {...props}/>\n            </div>\n        )\n    }\n\n}\nexport default Rainbow;","import React from 'react';\n\nconst Contact = (props) => {\n    console.log(props)\n    // setTimeout(() => {\n    //     props.history.push('/about')\n    // }, 2000)\n    return (\n        <div className=\"container\">\n            <h4>Contact</h4>\n            <p>Contact Page ~ Materialize comes in two different forms. You can select which version you want depending on your preference and expertise. To start using Materialize, all you have to do is download one of the options below.</p>\n        </div>\n    )\n}\n\nexport default Contact;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { deletePost } from '../action/postAction';\n\nclass Post extends Component {\n    handleClick = () => {\n        this.props.deletePost(this.props.post.id)\n        this.props.history.push('/')\n    }\n    render(){\n        console.log(this.props)\n        const post = this.props.post ? (\n            <div className=\"post\">\n                <h4 className=\"center\">{this.props.post.title}</h4>\n                <p>{this.props.post.body}</p>\n                <div className=\"center\">\n                    <button className=\"btn grey\" onClick={this.handleClick}>\n                        Delete Post\n                    </button>\n                </div>\n            </div>\n        ) : (\n            <div className=\"center\">Loading post...</div>\n        )\n        return(\n            <div className=\"container\">\n                {post}\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state, ownProps) => {\n    let id = ownProps.match.params.post_id;\n    return {\n        post: state.posts.find(post => post.id === id)\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        deletePost: (id) => { dispatch(deletePost(id)) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);","export const deletePost = (id) => {\n    return {\n        type: 'DELETE_POST',\n        id\n    }\n}","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport Post from './components/Post';\n\nclass App extends Component {\n  render(){\n    return(\n      <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n        <Route exact path='/' component={Home}/>\n        <Route path='/about' component={About}/>\n        <Route path='/contact' component={Contact}/>\n        <Route path='/posts/:post_id' component={Post} />\n        </Switch>\n      </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    posts: [\n        {id: '1', title: 'TITLE repudiandae veniam quaerat sunt sed 1', body: 'BODY repudiandae veniam quaerat sunt sed 1'},\n        {id: '2', title: 'TITLE repudiandae veniam quaerat sunt sed 3', body: 'BODY repudiandae veniam quaerat sunt sed 2'},\n        {id: '3', title: 'TITLE repudiandae veniam quaerat sunt sed 3', body: 'BODY repudiandae veniam quaerat sunt sed 3'}\n    ]\n}\nconst rootReduces = (state = initState, action) => {\n    if(action.type === 'DELETE_POST'){\n        let newPosts = state.posts.filter(post => {\n            return action.id !== post.id\n        });\n        return {\n            ...state,\n            posts: newPosts\n        }\n    }\n    return state;\n}\n\nexport default rootReduces;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReduces from './reducers/rootReducer';\n\nconst store = createStore(rootReduces);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}